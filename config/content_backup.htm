<h1>ONE</h1>
<p><br/>我的自介<span>／/( ◕‿‿◕ )＼</span></p>
<h6><span><img alt="" height="656" src="/images/1111.jpg" width="525"/></span></h6>
<h6><span>上面圖片為自畫像，雖然畫畫功力爛，但我覺得挺像的*ଘ(੭<em>ˊᵕˋ)੭</em></span></h6>
<h6>我是108年的五精一甲，學號50833118，自介到此結束!!!</h6>
<h6>雖然有突然，但我害羞<span>（ ´☣///_ゝ///☣｀）</span></h6>
<h6>就讓我安麗你們其他東西吧!!!</h6>
<h6>雖然推的東西不多，但我很努力在上課了</h6>
<h6>以下要安麗各位的是熊</h6>
<h6><img alt="" height="462" src="/images/3333.gif" width="462"/></h6>
<h6>沒有啦，是line裡面的熊大</h6>
<h6><img alt="" height="581" src="/images/222.jpg" width="581"/></h6>
<h6>是不是很可愛啊<span>･ิ≖ ω ≖･ิ✧</span></h6>
<h6>至少我覺得很可愛啦<span>◝(⁰▿⁰)◜</span></h6>
<h6>好啦，換吃得可以吧<span>(๑´ڡ`๑)</span></h6>
<h6>我要推薦雲林縣斗六市鎮北路<span>麗嬰房-雲林斗六鎮北門市</span></h6>
<h6>旁邊的火雞肉飯店，他的雞肉飯跟紫菜湯真的是很好吃!!<span>（¯﹃¯）</span></h6>
<h6>超級無敵推去吃，100分推推<span>(΄ಢ◞౪◟ಢ‵)◉◞౪◟◉)。</span></h6>
<h6><span>好了，我的安麗到此結束(｡•ㅅ•｡)♡</span></h6>
<h6><span>謝謝大家觀賞(｡◕∀◕｡)</span></h6>
<p></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>倉儲與網站</h1>
<ol>
<li>
<h5>請重新下載<span> </span><a href="https://drive.google.com/open?id=1xDTDfcHU18ipqZNbOufMkSZqibqNeL2T">wcmj2020_tool.7z</a>, 檔案大小為 435 MB, 解開壓縮後為 1.8 GB (其中包括 Mypaint, Dia 與 OBS 等).</h5>
</li>
<li>
<h5>登入 github.com 建立 Github 倉儲, 直接新增 README.md 檔案.</h5>
</li>
<li>
<h5>將所建立的倉儲 git clone 到近端.</h5>
</li>
<li>
<h5>git submodule add<span> </span><a href="https://github.com/mdecourse/cmsimde.git">https://github.com/mdecourse/cmsimde.git</a> cmsimde</h5>
</li>
<li>
<h5>在近端維護動態網站, 轉為靜態後 git add commit push</h5>
</li>
</ol>
<h1>Google-Meet</h1>
<h6>是一個可以多人連線通話且分享螢幕的視訊軟體，只要有放到行事曆，並且輸入對方的Gmail帳號就可以連線了，並且可以做線上串流和錄影的功能，且錄完會直接跑到你的遠端上去，真的是很方便呢!</h6>
<h4><a href="https://meet.google.com/">https://meet.google.com</a></h4>
<h1>ssh</h1>
<h4>由於在電腦教室時採用純 IPv6 協定上網, 因此為了能夠在近端將倉儲改版資料推送到目前只接受 IPv4 協定連線的 github, 以下除了將原本以 https 對 github 連線, 改為以 ssh 協定連線外, 在 Windows 環境下必須利用 putty 與 plink, 設定 putty 格式的 .ppk 以及能夠同時支援 IPv4 與 IPv6 的代理主機.</h4>
<h4>設定步驟如下:</h4>
<h4>1. 下載 Putty 工具組</h4>
<h4><span>從 </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/" rel="nofollow">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a><span><span> </span>下載一般版, 或從<span> </span></span><a href="http://jakub.kotrla.net/putty/" rel="nofollow">http://jakub.kotrla.net/putty/</a><span><span> </span>下載特殊的可攜版本.</span></h4>
<h4><span>2. 利用 y:\portablegit\bin\sh.exe 進入 shell 命令環境後, 以 </span></h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">ssh-keygen -t rsa -b 4096 -C "使用者學號"</pre>
<h4>在 /y/home/.ssh 目錄下建立 id_rsa 與 id_rsa.pub 等 private key 與 public key</h4>
<h4>之後以 SciTE 開啟 id_rsa.pub 後, 將此 public key 的內容, 以新增添加到 Github.com 帳號下 personal settings -&gt; SSH and GPG keys 頁面下.</h4>
<h4><span>3. 接下來要利用 puttygen.exe 將 id_rsa 轉為 Putty 可以解讀的 .ppk 格式, 並修改隨身系統的啟動批次檔案, 指定利用 putty 目錄下的 plink 執行 git 指令的網路代理設定.</span></h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">修改啟動的 start.bat 加入下列設定:
 
set GIT_HOME=%Disk%:\portablegit\bin\
set GIT_SSH=%Disk%:\putty\plink.exe</pre>
<h4>4. 利用 puttygen.exe 載入第二步驟所建立的 private key, 也就是 id_rsa.</h4>
<h4>開啟 puttygen 之後, 以右下方的 load 載入 id_rsa, 成功載入後, 利用 save private key 按鈕, 將已經轉為 putty 格式的 .ppk 存檔. 此一 .ppk 檔案必須在設定 putty 中 github.com session 時, 在 Connection-&gt;SSH-&gt;Auth 項目下, 將轉檔後的 .ppk 指向 private key file for authentication 欄位. </h4>
<h4>並在 Connection-&gt;Proxy 項目下, 指定 Proxy type: HTTP, 並將 IPv6 代理主機設為 ::53 或 ::42 埠號設為 3128.</h4>
<h4>5. 之後確定 home 下的 .ssh 目錄中的 config 設定檔案為:</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># no proxy at home
#ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H proxy.mde.nfu.edu.tw:3128 %h %p
# set git_ssh=y:/putty/plink.exe with auth under putty github.com session setup
ProxyCommand y:/putty/plink.exe github.com %h %p
  
Host github.com
    User git
    Port 22
    Hostname github.com
     
    # for connect.exe need openssh key format
    #IdentityFile "y:\home\.ssh\id_rsa_mdecourse"
    # for plink.exe need rsa key format but set under putty github.com session
    # plink.exe do not need the following setting
    #IdentityFile "y:\home\.ssh\mdecourse_putty_private.ppk"
  
    TCPKeepAlive yes
    IdentitiesOnly yes</pre>
<h4><span>6. 最後再將 wcmj2020 倉儲中 .git 目錄下的 config 檔案中的連線協定, 由 https 改為採 ssh 連線: 範例如下:</span></h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
    symlinks = false
    ignorecase = true
[submodule]
    active = .
[remote "origin"]
    #url = https://github.com/mdecourse/wcmj2020.git
    url = git@github.com:mdecourse/wcmj2020.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[submodule "cmsimde"]
    url = https://github.com/mdecourse/cmsimde.git</pre>
<div>
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="code">
<div class="container">
<div class="line number18 index17 alt1"><code class="js comments"></code></div>
</div>
</td>
</tr>
</tbody>
</table>
<h4 class="syntaxhighlighter js" id="highlighter_78664">之後就可以透過近端的 .ppk private key 與 Github.com 上的 public key 對應, 無需輸入帳號密碼就可以進行 git push.</h4>
</div>
<h1>Blogger</h1>
<h4>我的blogger : <a href="https://50833118.blogspot.com/">https://50833118.blogspot.com/</a></h4><h2>編輯</h2>
<h5>啟用 leo 在leo中開啟 tmp → wcmj2020 → config ，再打開 pelican.leo。<br/>編輯遠端與近端和共用，與倉儲連結。</h5>
<h5>添加 add_to_blogger</h5>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">@language python

from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

os.environ['TZ'] = 'Asia/Taipei'
argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    '''
    users = service.users()
    # 取得使用者 profile 資料
    user = users.get(userId='self').execute()
    print('網誌名稱: %s' % user['displayName'])
    '''
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    # post_id is now blogs["items"][0]["id"]
    blog_id = blogs["items"][0]["id"]
    #for blog in blogs['items']:
        #print(blog['name'], blog['url'])
    posts = service.posts()
    # 新增網誌 post 時, 需要 post_id
    body = {
    "kind": "blogger#post",
    "id": blog_id,
    "title": title,
    # 利用 markdown 函式, 將 .md 的內文轉為 html, 作為 Blogger 的文章內容
    "content": content,
    "labels": tags
    }
    insert = posts.insert(blogId=blog_id, body=body)
    posts_doc = insert.execute()
    post_id = posts_doc["id"]
    #print(posts_doc)
    os.remove("blogger.dat")
    # 利用最後的 child 節點來儲存 post_id
    to_save_post_id = p.insertAsLastChild()   
    # 改為內文為空的節點, id 直接標在 head 標題 
    to_save_post_id.b = ""
    to_save_post_id.h = post_id
    # 因為新增節點, commander 必須 redraw
    c.redraw()
    g.es("post_id 為", post_id)
    g.es("已經將資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")</pre>
<h5>edit_to_blogger</h5>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">@language python

from markdown import markdown
from oauth2client import client
from googleapiclient import sample_tools
import os

os.environ['TZ'] = 'Asia/Taipei'
argv = ""
# 認證並建立服務
# name of the api is "blogger", version is "v3"
# description of the api is __doc__
# file name of the application: location of client_secrets.json
service, flags = sample_tools.init(
  argv, 'blogger', 'v3', __doc__, "./../../client_secrets.json",
  scope='https://www.googleapis.com/auth/blogger')


def get_cat_tag_content(data):
    # 請注意, 因為 data 來自 .md 的檔案 內容, 第1行為 ---
    # 用跳行符號分割
    data_list = data.split("\n")
    #第 2 行為 title
    title= data_list[1]
    #第 4 行為 category
    category = data_list[3]
    #第 5 行為 tags
    tags = data_list[4]
    # 有多項資料的 content 型別為數列
    # 再將第 9 行之後的資料數列串回成以跳行隔開的資料
    content = "\n".join(data_list[8:])
    # 先將截斷摘要與內文的 pelican md 檔按符號, 換成 Blogger 的 &lt;!--more--&gt;
    content = content.replace('&lt;!-- PELICAN_END_SUMMARY --&gt;', '&lt;!--more--&gt;')
    # 接著若內容有 ~~~python 與 ~~~ 則換成 Wordpress 格式
    #content = content.replace('~~~python', '[code lang="python"]')
    #content = content.replace('~~~', '[/code]')
    return title, category, tags, content

# 從目前所在節點的 body pan 中取出類別, tags 以及文章內容
# p.h 為 @clean filename.md
# 因為要使用 @clean 節點掛上為後的 blogger post_id, 因此改為讀 .md 檔案
md_filename = p.h.split(" ")[1]
with open(md_filename, 'r', encoding="utf-8") as content_file:
    md_content = content_file.read()
# title_str, category_str, tags_str, content = get_cat_tag_content(p.b)
title_str, category_str, tags_str, content = get_cat_tag_content(md_content)
category = category_str.split(":")[1]
tags = tags_str.split(":")[1].split(",")
tags.append(category)
# title 是一個單獨的字串
title = title_str.split(":")[1]
# 將 markdown 格式 content 轉為 html
content = markdown(content)
# 以下處理 content 的 &lt;h2&gt; 標題
content = content.replace("&lt;h2&gt;", "&lt;h2&gt;&lt;font size='4'&gt;")
content = content.replace("&lt;/h2&gt;", "&lt;/font&gt;&lt;/h2&gt;")
# g.es(content)

try:
    blogs = service.blogs()
    # 取得使用者所建立網誌名稱
    blogs = blogs.listByUser(userId='self').execute()
    blog_id = blogs["items"][0]["id"]
    # 設法取得原 post 的 id
    postid_outline = p.getLastChild()
    # 直接從標題取得 post 的 id 號碼
    post_id = postid_outline.h
    posts = service.posts()
    # 更新網誌文章時的 body
    body = {
    "kind": "blogger#post",
    "title": title,
    "content": content
    }
    # need to save postId to outline head
    update = posts.update(blogId=blog_id, postId=post_id, body=body, publish=True)
    update_doc = update.execute()
    os.remove("blogger.dat")
    g.es("post_id 為", post_id)
    g.es("已經將更新資料送往 Blogger!")
except(client.AccessTokenRefreshError):
    g.es("error")</pre>
<p>在markdown下新增文章</p>
<p><img alt="" height="325" src="/images/螢幕擷取畫面 (1).png" width="577"/></p>
<p><img alt="" height="324" src="/images/螢幕擷取畫面 (2).png" width="576"/></p>
<p>選擇主檔案，按add_to_blogger，文章就會推到blogger上；如要編輯在leo裡編輯，<span>選擇主檔案，按edit_to_blogger</span>，<span>文章就會更新到blogger上。</span></p>
<h1>上課筆記</h1>
<h5>沒排順序，但實打實都是本人抄的!!!<span>ヾ(；ﾟ(OO)ﾟ)ﾉ</span></h5>
<h4><img alt="" height="280" src="/images/01.jpg" width="373"/></h4>
<h4><img alt="" height="373" src="/images/02.jpg" width="280"/></h4>
<h4><img alt="" height="280" src="/images/03.jpg" width="373"/></h4>
<h4><img alt="" height="280" src="/images/04.jpg" width="373"/></h4>
<h4><img alt="" height="280" src="/images/05.jpg" width="373"/></h4>
<h4><img alt="" height="280" src="/images/06.jpg" width="373"/></h4>
<h4><img alt="" height="373" src="/images/07.jpg" width="280"/></h4>
<h4><img alt="" height="373" src="/images/08.jpg" width="280"/></h4>
<h4><img alt="" height="373" src="/images/09.jpg" width="280"/></h4>